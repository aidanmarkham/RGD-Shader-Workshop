// Converted to CG Shader language from 
//https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/
float4 quat_from_axis_angle(float3 axis, float angle)
{
	float4 qr;
	float half_angle = (angle * 0.5) * 3.14159 / 180.0;
	qr.x = axis.x * sin(half_angle);
	qr.y = axis.y * sin(half_angle);
	qr.z = axis.z * sin(half_angle);
	qr.w = cos(half_angle);
	return qr;
}
float4 quat_conj(float4 q)
{
	return float4(-q.x, -q.y, -q.z, q.w);
}
float4 quat_mult(float4 q1, float4 q2)
{
	float4 qr;
	qr.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y);
	qr.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x);
	qr.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w);
	qr.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z);
	return qr;
}
float3 rotate_vertex_position(float3 position, float3 axis, float angle)
{
	float4 qr = quat_from_axis_angle(axis, angle);
	float4 qr_conj = quat_conj(qr);
	float4 q_pos = float4(position.x, position.y, position.z, 0);

	float4 q_tmp = quat_mult(qr, q_pos);
	qr = quat_mult(q_tmp, qr_conj);

	return float3(qr.x, qr.y, qr.z);
}